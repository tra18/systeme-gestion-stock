import { createUserWithEmailAndPassword } from 'firebase/auth';
import { doc, setDoc } from 'firebase/firestore';
import { auth, db } from '../firebase/config';

// Script pour cr√©er un utilisateur administrateur
export const createAdminUser = async (email, password, userData = {}) => {
  try {
    // Cr√©er l'utilisateur avec Firebase Auth
    const { user } = await createUserWithEmailAndPassword(auth, email, password);
    
    // Cr√©er le profil utilisateur dans Firestore avec le r√¥le DG
    await setDoc(doc(db, 'users', user.uid), {
      email: email,
      nom: userData.nom || 'Administrateur',
      prenom: userData.prenom || 'Admin',
      role: 'dg', // Directeur G√©n√©ral - acc√®s complet
      service: userData.service || 'Direction',
      createdAt: new Date(),
      isAdmin: true
    });
    
    console.log('‚úÖ Utilisateur administrateur cr√©√© avec succ√®s !');
    console.log(`üìß Email: ${email}`);
    console.log(`üîë R√¥le: Directeur G√©n√©ral (acc√®s complet)`);
    
    return user;
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation de l\'utilisateur administrateur:', error);
    throw error;
  }
};

// Fonction pour cr√©er un utilisateur avec un r√¥le sp√©cifique
export const createUserWithRole = async (email, password, role, userData = {}) => {
  try {
    const { user } = await createUserWithEmailAndPassword(auth, email, password);
    
    await setDoc(doc(db, 'users', user.uid), {
      email: email,
      nom: userData.nom || 'Utilisateur',
      prenom: userData.prenom || 'Test',
      role: role,
      service: userData.service || 'Service',
      createdAt: new Date()
    });
    
    console.log(`‚úÖ Utilisateur cr√©√© avec le r√¥le: ${role}`);
    return user;
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation de l\'utilisateur:', error);
    throw error;
  }
};
